#!/bin/perl
use strict;

# =============================================================================
# CLI interface
# =============================================================================
package Cmd;
sub new
{
    my ($class, $name, $desc, $routine) = @_;

    my $this = {
        name => $name,
        description => $desc,
        routine => $routine,
        subroutines => {},
    };
    bless $this, $class;
    return $this;
}

# -----------------------------------------------------------------------------

sub knows
{
    my ($this, $name) = @_;
    if ($name && defined $this->{subroutines}->{$name}) {
        return 1;
    }
    return 0;
}

# -----------------------------------------------------------------------------

sub add_sub($$)
{
    my ($this, $subCmd) = @_;
    if ($this->knows($subCmd->{name})) {
        die "Duplicate command name $this->{name}::\"$subCmd->{name}\"";
    }
    $this->{subroutines}->{$subCmd->{name}} = $subCmd;
}

# -----------------------------------------------------------------------------

sub get_sub($$)
{
    my ($this, $name) = @_;
    return $this->{subroutines}->{$name}
}

# -----------------------------------------------------------------------------

sub run
{
    my ($this) = shift;
    return $this->{routine}($this, @_);
}

# -----------------------------------------------------------------------------

sub help
{
    my ($this, @argv) = @_;
    my $cmds = join ( '|', keys %{$this->{subroutines}});
    print "Usage: $this->{name} [$cmds] - $this->{description}\n";
    for my $cmd ( values %{$this->{subroutines}}) {
        print "    $cmd->{name} - $cmd->{description}\n"
    }
    if (@argv) {
        print "\n";
        print "Can't parse: \"" . join (' ', @argv) . "\"\n";
        return -1
    }
}

# -----------------------------------------------------------------------------

sub process
{
    my ($this, $cmd, @a) = @_;
    my $sub;
    if ($sub = $this->get_sub($cmd)) {
        return $sub->run(@a);

    } else {
        return $this->help($cmd, @a);
    }
}

# =============================================================================
# LOGGING
# =============================================================================

sub LOG {
    our $g_log_level;
    my $level = shift;
    if ($level <= $g_log_level) {
        printf @_;
        print "\n";
    }
}

# -----------------------------------------------------------------------------

sub set_log_level {
    our $g_log_level = shift;
}

# -----------------------------------------------------------------------------

sub DEBUG { LOG(3, @_); }

# -----------------------------------------------------------------------------

sub DUMP { LOG(4, @_); }

# =============================================================================
# Files
# =============================================================================

sub Makefile {
    our $OUTDIR;
    my ($name) = @_;
    return <<ENDMAKEFILE;
MAKEFLAGS += --no-builtin-rules

OUTDIR := $OUTDIR
NAME   := $name

.PHONY: pack pdf

pdf: \${OUTDIR}/\${NAME}.pdf
pack: ../\${NAME}.pdf

\${OUTDIR}/\${NAME}.pdf: \${NAME}.tex |\${OUTDIR}
	pdflatex -output-directory \${OUTDIR} \$<

\${OUTDIR}:
	echo "#  make \$@"
	mkdir \$@

clean:
	echo "#  clean \${OUTDIR}"
	rm -rf \${OUTDIR}

../\${NAME}.pdf: \${OUTDIR}/\${NAME}.pdf .git
	echo "#  packing \$@"
	git diff-index --quiet HEAD || \\
	   	(git status && echo "Changes wasn't commit" && false)
	git gc
	tar -cf \${OUTDIR}/src.tar .git
	pdftk \${OUTDIR}/\${NAME}.pdf attach_files \${OUTDIR}/src.tar output ../\${NAME}.pdf
ENDMAKEFILE
}

# -----------------------------------------------------------------------------

sub gitignore {
    our $OUTDIR;
    return <<ENDGITIGNORE;
$OUTDIR
ENDGITIGNORE
}

# =============================================================================
# Doc helpers
# =============================================================================

sub doc_in_cwd {
    open my $description, "<" ,".git/description" || return;
    my ($name, $version);
    while(<$description>) {
        $name = $1 and $version = $2
            if /Document "(.+)" repository \(version ([\d.]+)\)/;
    }
    close $description;
    if (!$name) { return; }
    return {
        'name' => $name,
        'version' => $version,
    };
}

# =============================================================================
# Auxiliary
# =============================================================================

sub git_add {
    my $msg;
    my ($fname) = @_;

    `git add "$fname"`; !$?
        || die "$msg\n Can't add \"$fname\" to repository"; DUMP $msg;

   our $isCommitRequired = "true";
}

# -----------------------------------------------------------------------------

sub git_commit {
    my $message = shift;
    my $msg;
    our $isCommitRequired;
    if ($isCommitRequired) {
        $msg = `git commit -m "$message"`; !$?
            || die "$msg\n Can't perform commit"
    }
}

# -----------------------------------------------------------------------------

sub git_init {
    my $name = shift;
    my $msg;

    $msg = `git init`; !$?
        || die "$msg\nCan't initialise repository"; DUMP $msg;

    unlink glob ".git/hooks/*.sample";

    open (my $description, ">", ".git/description");
    print $description "Document \"$name\" repository (version " . version() . ")\n" .
                       "Ilya Kuzmin (i.g.kuzmin.spb\@gmail.com) (c)\n";
    close $description;

    open (my $gitignore, ">", ".gitignore");
    print $gitignore gitignore;
    close $gitignore;

    git_add ".gitignore";
}

# -----------------------------------------------------------------------------

sub git_checkout {
    my $rev = shift;
    my $msg;
    $msg = `git checkout $rev`; !$?
        || die "$msg\nCan't check out repository"; DUMP $msg;
}

# -----------------------------------------------------------------------------

sub touch {
    my $fname = shift;
    open my $fh, ">>", "$fname";
    print $fh "";
    close $fh;
}

# -----------------------------------------------------------------------------

sub version {
    return "1.0"
}

# =============================================================================
# Commands Implementation
# =============================================================================


sub cmd_new {
    my ($this, $name, @argv) = @_;
    my $msg;
    if ($name) {
        if (! -d $name) {
            DEBUG("Create \"$name\"");
            mkdir $name;
        }
        chdir $name;
        if (! -d ".git") {
            DEBUG("#  Initialise repository");
            git_init "$name"
        }
        if (! -f "Makefile") {
            DEBUG("#  Populate Makefile");
            open (my $mkfile, ">", "Makefile")
                || die "Can't create \"Makefile\""; DUMP $msg;
            print $mkfile Makefile $name;
            close $mkfile;
            git_add "Makefile";

        }
        if (! -f "$name.tex") {
            touch "$name.tex";
            git_add "$name.tex";
        }
        git_commit "Initial commit";
        if (! -s "$name.tex") {
            exec "vim +TTemplate\\ ru-article $name.tex";
        }
        exec "vim $name.tex";
    }
    return 0;
}

# -----------------------------------------------------------------------------

sub cmd_open {
    my ($this, $fname, @argv) = @_;
    my ($msg);

    my $name = "$fname.tmp";

    mkdir $name
        || die "Can't create new \"$name\"";

    $msg = `pdftk $fname unpack_file output $name/`; !$?
        || die "$msg\nCan't extraxt sources"; DUMP $msg;

    chdir $name;
    $msg = `tar -xf src.tar && rm src.tar`; !$?
        || die "$msg\nCan't unpuck sources"; DUMP $msg;

    git_checkout "-- .";

    if (my $doc = doc_in_cwd) {
        my $original_name = $doc->{'name'};
        chdir "..";
        if ( -d $original_name || ! rename $name, $original_name) {
            print "#  extracted $fname -> $name\n";
            return
        }
        print "#  extracted $fname -> $original_name\n";
    }
}

sub cmd_test {
    my ($this, $fname, @argv) = @_;
    if (my $doc = doc_in_cwd) {
        print "name: $doc->{'name'}\n";
        print "version: $doc->{'version'}\n";

    } else {
        print "It is not a doc directory\n";
    }
}

# -----------------------------------------------------------------------------

sub init_cmds()
{
    my $cmd = new Cmd('doc', "Document processing wrapper");
    $cmd->add_sub( new Cmd('new', "Initialise new document", \&cmd_new));
    $cmd->add_sub( new Cmd('open', "Extract sources from document", \&cmd_open));
    $cmd->add_sub( new Cmd('test', "test", \&cmd_test));
    return $cmd
}

# =============================================================================

sub main
{
    set_log_level(3);
    our $OUTDIR = ".out";

    my $cmd_list = init_cmds;
    $cmd_list->process(@_);
}

# -----------------------------------------------------------------------------

exit main @ARGV;
